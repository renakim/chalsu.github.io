I"Ç.<p>I will summarize how to add Ethernet by connecting I/O module to Raspberry Pi zero W (RPI zero).</p>

<p>The product is a module called WIZnetâ€™s WIZ850io, which is based on the W5500 Ethernet chip and includes an RJ45 connector.</p>

<p><img src="https://wizwiki.net/wiki/lib/exe/fetch.php?media=products:wiz850io:wiz850io.png" width="30%" /></p>

<p>The W5500 is an Ethernet controller chip with hardwired TCP / IP and supports SPI communication.
It helps to easily add internet connection to embedded system.</p>

<p>Details of the WIZ850io module can be found on the link below.</p>

<ul>
  <li><a href="https://wizwiki.net/wiki/doku.php?id=products:wiz850io:start">WIZwiki - WIZ850io</a></li>
  <li><a href="http://shop.wiznet.co.kr/front/contents/product/view.asp?cateid=48&amp;pid=1263" target="\_blank">WIZ850io shop link</a></li>
</ul>

<h2 id="development-environment">Development environment</h2>

<p>The development environment is as follows.
Raspbian used the 2018-03-13 version, not the latest version, for kernel compatibility testing.</p>

<ul>
  <li>
    <p>Ubuntu 16.04 64bit VM (for cross-compile)</p>
  </li>
  <li>
    <p>Raspbian version</p>
    <ul>
      <li>2018-03-13-raspbian-stretch-lite (Linux kernel 4.9.80+)</li>
    </ul>
  </li>
</ul>

<h2 id="pin-connection">Pin connection</h2>

<p>Below is the pin connection information of RPI zero and WIZ850io.</p>

<p>Each pinmap can be found at the following link.
For RPI zero, the direction may be confusing, from the side with the micro sd card slot to the one.</p>

<ul>
  <li><a href="https://wizwiki.net/wiki/doku.php?id=products:wiz850io:start">WIZ850io specification</a></li>
  <li><a href="https://pinout.xyz/">Raspberry Pi pinout</a></li>
</ul>

<table>
  <thead>
    <tr>
      <th>RPI zero</th>
      <th>WIZ850io</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>6 (GND)</td>
      <td>GND</td>
    </tr>
    <tr>
      <td>1 (3.3V)</td>
      <td>3.3V</td>
    </tr>
    <tr>
      <td>23 (SPI0_SCLK)</td>
      <td>SCLK</td>
    </tr>
    <tr>
      <td>19 (SPI0_MOSI)</td>
      <td>MOSI</td>
    </tr>
    <tr>
      <td>21 (SPI0_MISO)</td>
      <td>MISO</td>
    </tr>
    <tr>
      <td>18 (BCM24)</td>
      <td>RSTn</td>
    </tr>
    <tr>
      <td>15 (BCM22)</td>
      <td>INTn</td>
    </tr>
    <tr>
      <td>24 (SPI0_CE0)</td>
      <td>SCNn</td>
    </tr>
  </tbody>
</table>

<p>If all the pins are connected, it will look like the picture below.</p>

<p><img src="https://github.com/renakim/renakim.github.io/blob/master/files/rpi-zero-with-wiz850io_1.jpg?raw=true" /></p>

<hr />

<h2 id="raspberry-pi-kernel-compile">Raspberry pi kernel compile</h2>

<p>How to compile the kernel for Raspberry pi is explained in the link below.</p>

<ul>
  <li><a href="https://www.raspberrypi.org/documentation/linux/kernel/building.md">Raspberry Pi kernel build</a></li>
</ul>

<p>This article briefly summarizes the cross compile method for RPI zero.</p>

<p>Host Cross-compile in ubuntu environment.</p>

<h3 id="required-package-installation-and-toolchain-setup">Required package installation and toolchain setup</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo apt-get install git bc
$ sudo apt-get install libncurses5-dev libncursesw5-dev

# Install toolchain
$ git clone https://github.com/raspberrypi/tools ~/tools
$ echo PATH=\$PATH:~/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin &gt;&gt; ~/.bashrc
$ source ~/.bashrc
</code></pre></div></div>

<h3 id="kernel-source-download">Kernel source download</h3>

<p>I set up a version of the branch to download to match the version of the Raspbian image to use and the kernel version.</p>

<p>For reference, the kernel information for each Raspbian version can be found at the following link:</p>

<ul>
  <li><a href="http://downloads.raspberrypi.org/raspbian/release_notes.txt">Rasbian release note</a></li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Download specific version
git clone --depth=1 --branch rpi-4.9.y https://github.com/raspberrypi/linux

# Download latest version
git clone --depth=1 https://github.com/raspberrypi/linux
</code></pre></div></div>

<h3 id="kernel-configuration-for-rpi-zero">Kernel configuration (For RPI zero)</h3>

<p>Once the download is complete, proceed to the kernel configuration and menuconfig settings for the W5500 driver.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd linux
$ KERNEL=kernel
$ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bcmrpi_defconfig

# W5500 driver configuration
$ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- menuconfig
</code></pre></div></div>

<p><img src="https://github.com/renakim/renakim.github.io/blob/master/files/rpi-zero-menuconfig_1.png?raw=true" /></p>

<p><img src="https://github.com/renakim/renakim.github.io/blob/master/files/rpi-zero-menuconfig_2.png?raw=true" /></p>

<p>Type â€˜/â€™ to display the search box, and search for the â€˜wiznetâ€™ keyword.</p>

<p>In the search results, you can move the page by pressing the direction key or page up/down button.</p>

<p><img src="https://github.com/renakim/renakim.github.io/blob/master/files/rpi-zero-menuconfig_3.png?raw=true" /></p>

<p>Activate both options here.</p>

<p><strong>Select â€˜WIZnet W5100 Ethernet supportâ€™</strong></p>

<p>If you enable the above option, the following options will appear.</p>

<p><strong>Select â€˜WIZnet W5100 / W5200 / W5500 Ethernet support for SPI modeâ€™</strong></p>

<p>You can also select a new option.</p>

<p><img src="https://github.com/renakim/renakim.github.io/blob/master/files/rpi-zero-menuconfig_4.png?raw=true" /></p>

<p><img src="https://github.com/renakim/renakim.github.io/blob/master/files/rpi-zero-menuconfig_5.png?raw=true" /></p>

<hr />

<h3 id="kernel-compile">Kernel compile</h3>

<p>When the setting is completed, proceed with compile with below command.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- zImage modules dtbs -j4
</code></pre></div></div>

<p>It takes a long time to complete the compilation. It took about 30 minutes to an hour, depending on the PC specification.</p>

<p>The kernel images and modules we will use are created in the following path, respectively. Copy the following files to raspberry pi.</p>

<ul>
  <li>Kernel image:
    <ul>
      <li>linux/arch/arm/boot/zImage</li>
    </ul>
  </li>
  <li>modules:
    <ul>
      <li>linux/drivers/net/ethernet/wiznet/w5100.ko &amp; w5100-spi.ko</li>
    </ul>
  </li>
</ul>

<p>There is also a way to copy directly using sd card, but since there are not many files here, we will use a file transfer tool called ** scp **.
At this time, RPI zero and PC communication should be possible.</p>

<p>Copy the file using the following command.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ scp arch/arm/boot/zImage pi@&lt;RPI zero IP address&gt;:/home/pi
$ scp drivers/net/ethernet/wiznet/*ko pi@&lt;RPI zero IP address&gt;:/home/pi
</code></pre></div></div>

<hr />

<h2 id="apply-custom-kernel">Apply custom kernel</h2>

<p>When you enter RPI zeroâ€™s home directory (/home/pi), there will be zImage and w5100.ko and w5100-spi.ko files copied through scp.
Check with the command:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd ~
$ ls -al
</code></pre></div></div>

<p>There are two ways to apply a newly created kernel, which can be done in any way.</p>

<hr />

<h3 id="how-to-replace-an-existing-kernel-file">How to replace an existing kernel file</h3>

<p>First, rename the copied kernel image to kernel.img.</p>

<p>This is the kernel name recognized by Raspberry pi, which depends on the model. Details can be found at the following link:</p>

<ul>
  <li><a href="https://www.raspberrypi.org/documentation/linux/kernel/building.md">Raspberry Pi kernel build</a></li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mv zImage kernel.img
</code></pre></div></div>

<p>Then back up the existing kernel with the name .org, copy the new kernel, and reboot.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo mv /boot/kernel7.img /boot/kernel7.img.org
$ sudo cp kernel7.img /boot/.
$ sudo reboot
</code></pre></div></div>

<p>When booting is complete, use the following command to verify that the new kernel has been applied.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ uname -r
</code></pre></div></div>

<hr />

<h3 id="how-to-keep-existing-kernels-and-add-them-in-configtxt">How to keep existing kernels and add them in config.txt</h3>

<p>You can keep your existing kernel, create a new named kernel, and specify it directly in /boot/config.txt.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mv zImage kernel_w5500.img
</code></pre></div></div>

<p>Copy the new image to the /boot/ directory and specify the file name in config.txt.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo vi /boot/config.txt
...
kernel=kernel_w5500.img

# Save and reboot
$ sudo reboot
</code></pre></div></div>

<hr />

<h2 id="create-device-tree-overlay">Create Device tree overlay</h2>

<p>The device tree describes the hardware (SoC, Board) of the system using text with a certain grammar.</p>

<p>The Device tree overlay is a way to add a device tree fragment for an optional component, with a default device tree associated with the SoC.</p>

<p>A detailed description of the device tree can be found at the link below.</p>

<ul>
  <li><a href="ttps://www.raspberrypi.org/documentation/configuration/device-tree.md">Raspberry Pi doc: Device Trees, overlays, and parameters</a></li>
</ul>

<p>The dts code can be found in the attached github repository.</p>

<p>When you have finished creating the dts file, compile it with dtc and copy it to the /boot/overlay directory.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># dts compile
$ dtc -I dts -O dtb -o w5500-overlay.dtb w5500-overlay.dts

# copy the dtb file 
$ sudo cp w5500-overlay.dtb /boot/overlays/.

# Add to config.txt
$ sudo vi /boot/config.txt
(add this to last line)
dtoverlay=w5500
</code></pre></div></div>

<p>And reboot the RPI zero.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo reboot
</code></pre></div></div>

<p>Almost everything is done now. After compiling, you can activate the module copied to RPI zero.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo insmod w5100.ko
$ sudo insmod w5100-spi.ko
</code></pre></div></div>

<p>When the driver module is successfully loaded, a new ethernet interface is created as shown below.</p>

<p><img src="https://github.com/renakim/renakim.github.io/blob/master/files/rpi-zero-with-wiz850io-new_eth.png?raw=true" /></p>

<p>If you look at the newly created eth0, you can see that the mac address set in dt overlay is applied.</p>

<p>At this time, in order to receive IP automatically, it must be connected to an AP (router) supporting DHCP.</p>

<hr />

<h2 id="checking-and-testing">Checking and testing</h2>

<p>The simplest way to verify operation is ping test.</p>

<p>Try to ping down the existing wlan0 interface and enable only eth0.</p>

<p>I tried to ping the same band of PCs.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ping 192.168.50.80
</code></pre></div></div>

<p><img src="https://github.com/renakim/renakim.github.io/blob/master/files/rpi-zero-with-wiz850io_ping.png?raw=true" /></p>

<p>You can verify that the ping works well through the newly created ethernet interface.</p>
:ET